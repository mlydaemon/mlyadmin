<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace必须是DAO接口的全类名  -->

<mapper namespace="com.mlycan.main.mapper.SceneMapper">
	<resultMap type="com.mlycan.main.entity.Scene" id="sceneResultMap"> 
        <id property="sceneId" column="scene_id"/> 
        <result property="sceneName" column="scene_name"/>
        <result property="robotName" column="nickname"/>
        <result property="robotId" column="robot_id"/>
        <result property="robotAccount" column="account"/>
        <result property="application" column="application"/>
        <result property="semantic" column="semangtic"/>
        <result property="active" column="active"/> 
        <result property="comment" column="comment"/> 
        <result property="level" column="level"/> 
        <result property="performer" column="performer"/> 
        <result property="processor" column="processor"/> 
        <result property="keywords" column="keywords"/> 
    </resultMap>
    <select id="findSceneForTrain"   resultMap="sceneResultMap">
		   select  scen.scene_id,
				   scen.scene_name,
				   robot.nickname  as nickname,
				   robot.account    as account,
				   scen.application,
				   scen.semantic,
				   scen.active,
				   scen.comment,
				   scen.level,
				   scen.performer,
				   scen.processor,
				   scen.keywords
		     from mly_scene scen
		     left join mly_robot_scene rc on(rc.scene_id = scen.scene_id)
		     left join mly_robot  robot on(robot.robot_id = rc.robot_id)
	         where robot.account = #{robotAccount}
	            AND scen.application = #{application}
	           <!--  <if test="semantic==null">  
                 AND scen.semantic = #{semantic}
               </if> -->
	            
	</select>
	<select id="findForRobotSwitch"   resultMap="sceneResultMap">
		   select  scen.scene_id,
				   scen.scene_name,
				   scen.application,
                   rc.robot_id,
				   scen.semantic,
				   scen.active,
				   scen.comment
		     from mly_scene scen
		     left join mly_robot_scene rc on(rc.scene_id = scen.scene_id and rc.robot_id = #{robotId} and rc.status = 1)
	</select>
	<select id="findByRobotAccount"   resultMap="sceneResultMap">
		   select  scen.scene_id,
				   scen.scene_name,
				   robot.nickname  as nickname,
				   robot.account    as account,
				   scen.application,
				   scen.semantic,
				   scen.active,
				   scen.comment
		     from mly_scene scen
		     left join mly_robot_scene rc on(rc.scene_id = scen.scene_id  and rc.status !=2)
		     left join mly_robot  robot on(robot.robot_id = rc.robot_id)
	         where robot.account = #{account}
	</select>
	
	<select id="findAll"   resultMap="sceneResultMap">
		   select  scen.scene_id,
				   scen.scene_name,
				   scen.application,
				   scen.semantic,
				   scen.active,
				   scen.comment,
				   scen.level,
				   scen.performer,
				   scen.processor,
				   scen.keywords
		     from mly_scene scen
	         <if test="count!=null">  
               limit #{start},#{count}
             </if>
	</select>
	<select id="findAllCount"   resultType="java.lang.Integer">
		 <![CDATA[ 
		   select count(scen.scene_id) as value
		     from mly_scene scen 
		 	]]> 
	</select>
	<select id="findScene"   resultMap="sceneResultMap">
		<![CDATA[
		    select  scen.scene_id,
				   scen.scene_name,
				   scen.application,
				   scen.semantic,
				   scen.active,
				   scen.comment,
				   scen.level,
				   scen.performer,
				   scen.processor,
				   scen.keywords
		     from mly_scene scen
		     where scen.scene_id = #{sceneId}
			]]>
	</select>
	<insert id="saveScene"  >
	<![CDATA[
		   insert into  mly_scene(scene_name,application,semantic,active,comment,level,performer,processor,keywords)
		    VALUES(#{sceneName},#{application},#{semantic},#{active},#{comment},#{level},#{performer},#{processor},#{keywords})
			]]>
	</insert>
	<update id="updateScene"  parameterType="com.mlycan.main.entity.Scene"   >
		<![CDATA[
		   update mly_scene scen
		      set 
		          scen.scene_id=#{sceneId},
		          scen.scene_name=#{sceneName},
		          scen.application=#{application},
		          scen.semantic=#{semantic},
		          scen.active=#{active},
		          scen.comment=#{comment},
		          scen.level=#{level},
		          scen.performer=#{performer},
		          scen.processor=#{processor},
		          scen.keywords=#{keywords}
		      where  scen.scene_id=#{sceneId} 
			]]>
	</update>
	<delete id="deleteScene">
	<![CDATA[
	         delete 
	         from mly_scene 
	         where scene_id=#{sceneId} 
			]]>
	</delete>
	
</mapper>
