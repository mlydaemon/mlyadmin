<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace必须是DAO接口的全类名  -->
<mapper namespace="com.mlycan.main.mapper.LogicMapper">
	<resultMap type="com.mlycan.main.entity.Logic" id="logicResultMap"> 
        <id property="logicId" column="logic_id"/>
        <result property="logicName" column="logic_name"/>
        <result property="sceneId" column="scene_id"/>
        <result property="sceneName" column="scene_name"/> 
        <result property="command" column="command"/>
        <result property="application" column="application"/>
        <result property="robotName" column="robot_name"/>
        <result property="robotAccount" column="robot_account"/>
        <result property="semantic" column="semantic"/>
        <result property="code" column="code"/> 
        <result property="comment" column="comment"/> 
        <result property="keywords" column="keywords"/> 
    </resultMap>
	
	<select id="findList"   resultMap="logicResultMap">
		   select  log.logic_id   as logic_id,
		           log.scene_id   as scene_id,
				   log.logic_name as logic_name,
				   sce.scene_name as scene_name,
				   log.command    as command,
				   log.semantic   as semantic,
				   log.code       as code,
				   log.comment    as comment,
				   log.keywords   as keywords
		     from mly_logic log
		     left join mly_scene sce on (log.scene_id = sce.scene_id)
		     where sce.scene_id = #{sceneId}
	</select>
	<select id="findAll"   resultMap="logicResultMap">
		   select  log.logic_id   as logic_id,
		           log.scene_id   as scene_id,
				   log.logic_name as logic_name,
				   sce.scene_name as scene_name,
				   log.command    as command,
				   log.semantic   as semantic,
				   log.code       as code,
				   log.comment    as comment,
				   log.keywords   as keywords
		     from mly_logic log
		     left join mly_scene sce on (log.scene_id = sce.scene_id)
		     <if test="sceneName!=null">  
               where sce.scene_name=#{sceneName}
             </if>
               order by log.scene_id
	         <if test=" count!=null">  
               limit #{curpage},#{count}
             </if>
	</select>
	<select id="findAllCount"   resultType="java.lang.Integer">
		   select count(log.logic_id) as value
		     from mly_logic log 
		     <if test="sceneName!=null">  
               where sce.scene_name=#{sceneName}
             </if>
	</select>
	<select id="findLogicForConfig"   resultMap="logicResultMap">
		<![CDATA[
		  SELECT 
			    logic.logic_name  as logic_name,
			    logic.semantic    as semantic,
			    logic.command     as command,
			    logic.code        as code,
			    scene.scene_name  as scene_name,
			    scene.application as application
			FROM
			    mly_logic logic
			        left join
			    mly_scene scene ON (logic.scene_id = scene.scene_id)
			where logic.logic_id = #{logicId}
			]]>
	</select>
	<select id="findLogicForTrain"   resultMap="logicResultMap">
		<![CDATA[
		  SELECT 
			    logic.logic_name  as logic_name,
			    logic.semantic    as semantic,
			    logic.command     as command,
			    logic.code        as code,
			    scene.scene_name  as scene_name,
			    scene.application as application,
			    robot.nickname    as robot_name,
			    robot.account     as robot_account
			FROM
			    mly_logic logic
			        left join
			    mly_scene scene ON (logic.scene_id = scene.scene_id)
			        left join
			    mly_robot_scene rc ON (rc.scene_id = scene.scene_id)
			        left join
			    mly_robot robot ON (robot.robot_id = rc.robot_id)
			where
			    robot.account = #{robotAccount} 
			AND scene.application = #{application}
		    AND logic.semantic = #{semantic}
			]]>
	</select>
	<select id="findLogic"   resultMap="logicResultMap">
		<![CDATA[
		  select  log.logic_id   as logic_id,
		           log.scene_id   as scene_id,
				   log.logic_name as logic_name,
				   log.command    as command,
				   log.semantic   as semantic,
				   log.code       as code,
				   log.comment    as comment,
				   log.keywords   as keywords
		     from mly_logic log
		     where log.logic_id = #{logicId}
			]]>
	</select>
	<insert id="saveLogic"  >
	<![CDATA[
		   insert into  mly_logic(logic_id,scene_id,logic_name,command,semantic,code,comment,keywords)
		    VALUES(#{logicId},#{sceneId},#{logicName},#{command},#{semantic},#{code},#{comment},#{keywords})
			]]>
	</insert>
	<update id="updateLogic"  parameterType="com.mlycan.main.entity.Logic"   >
		<![CDATA[
		   update mly_logic log
		      set 
		          log.logic_id=#{logicId},
		          log.scene_id=#{sceneId},
		          log.logic_name=#{logicName},
		          log.semantic=#{semantic},
		          log.command=#{command},
		          log.code=#{code},
		          log.comment=#{comment},
		          log.keywords=#{keywords}
		      where  log.logic_id=#{logicId} 
			]]>
	</update>
	<delete id="deleteLogic">
	<![CDATA[
	         delete 
	         from mly_logic 
	         where logic_id=#{logicId} 
			]]>
	</delete>
	
</mapper>
